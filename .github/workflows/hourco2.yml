name: Hourly AQI Logger

on:
  schedule:
    - cron: '0 * * * *'  # Every hour
  workflow_dispatch:

jobs:
  log-aqi:
    runs-on: ubuntu-latest

    steps:
      - name: ✅ Checkout Repo
        uses: actions/checkout@v4

      - name: 🐍 Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: 📦 Install Python Dependencies
        run: pip install pandas requests

      - name: 🧠 Collect and Merge AQI Data
        run: |
          python - <<EOF
          import requests
          import pandas as pd
          import datetime
          import os
          from glob import glob

          IQAIR_KEY = "a1c4ea3c-c116-43fb-9d98-81004cf3f771"
          OPENWEATHER_KEY = "ee88310481e99a7843bdedc0cca27fd1"

          LAT = 24.8607
          LON = 67.0011
          CITY = "Karachi"
          COUNTRY = "PK"

          def get_iqair_aqi():
              try:
                  url = f"http://api.airvisual.com/v2/nearest_city?lat={LAT}&lon={LON}&key={IQAIR_KEY}"
                  r = requests.get(url)
                  r.raise_for_status()
                  data = r.json()
                  pollution = data["data"]["current"]["pollution"]
                  return {
                      "aqi_index": pollution.get("aqius"),
                      "pm2_5": pollution.get("p2"),
                      "pm10": pollution.get("p1"),
                      "co": pollution.get("co"),
                      "no2": pollution.get("n2"),
                      "o3": pollution.get("o3"),
                      "so2": pollution.get("s2"),
                      "nh3": pollution.get("nh3")
                  }
              except Exception as e:
                  print("IQAir Pollutants Error:", e)
                  return None

          def get_weather():
              try:
                  url = f"http://api.openweathermap.org/data/2.5/weather?q={CITY},{COUNTRY}&appid={OPENWEATHER_KEY}&units=metric"
                  r = requests.get(url)
                  r.raise_for_status()
                  data = r.json()
                  return {
                      "temp": data["main"]["temp"],
                      "humidity": data["main"]["humidity"],
                      "pressure": data["main"]["pressure"],
                      "wind_speed": data["wind"]["speed"]
                  }
              except Exception as e:
                  print("Weather Error:", e)
                  return None

          def get_forecast_features():
              try:
                  url = f"http://api.openweathermap.org/data/2.5/forecast?lat={LAT}&lon={LON}&appid={OPENWEATHER_KEY}&units=metric"
                  r = requests.get(url)
                  r.raise_for_status()
                  data = r.json()
                  forecasts = data["list"]
                  out = {}
                  for i, entry in enumerate(forecasts[:24]):
                      out[f"forecast_{i+1}_temp"] = entry["main"]["temp"]
                      out[f"forecast_{i+1}_humidity"] = entry["main"]["humidity"]
                      out[f"forecast_{i+1}_pressure"] = entry["main"]["pressure"]
                      out[f"forecast_{i+1}_wind_speed"] = entry["wind"]["speed"]
                  return out
              except Exception as e:
                  print("Forecast Error:", e)
                  return {}

          def collect_hourly_data():
              now = datetime.datetime.utcnow()
              date_str = now.strftime("%Y-%m-%d")
              time_str = now.strftime("%H:%M:%S")
              hour_of_day = now.hour
              day_of_week = now.weekday()
              is_weekend = 1 if day_of_week >= 5 else 0

              folder = f"data/{date_str}"
              os.makedirs(folder, exist_ok=True)
              csv_path = f"{folder}/karachi.csv"

              pollutants = get_iqair_aqi()
              weather = get_weather()
              forecast = get_forecast_features()

              if not pollutants or not weather or not forecast:
                  print("❌ Incomplete data. Skipping logging.")
                  return

              row = {
                  "date": date_str,
                  "time": time_str,
                  "hour_of_day": hour_of_day,
                  "day_of_week": day_of_week,
                  "is_weekend": is_weekend,
                  **pollutants,
                  **weather,
                  **forecast
              }

              df = pd.DataFrame([row])
              if os.path.exists(csv_path):
                  df.to_csv(csv_path, mode="a", header=False, index=False)
              else:
                  df.to_csv(csv_path, index=False)

              print(f"✅ Data saved to {csv_path}")

          def merge_all_data():
              files = glob("data/*/karachi.csv")
              if not files:
                  print("No files to merge.")
                  return
              all_data = pd.concat([pd.read_csv(f) for f in files], ignore_index=True)
              os.makedirs("data1", exist_ok=True)
              all_data.to_csv("data1/merged_karachi_aqi.csv", index=False)
              print("✅ Merged file saved to data1/merged_karachi_aqi.csv")

          collect_hourly_data()
          merge_all_data()
          EOF

      - name: 📂 Commit and Push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"
          git add data/ data1/
          git commit -m "📊 Hourly AQI collected and merged - $(date -u)" || echo "No changes to commit"
          git push


